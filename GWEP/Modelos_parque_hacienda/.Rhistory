stringr::str_c(., collapse=", ")
#get the data from the first 'page' of data the api provides
page_one_response <- GET(my_link,
path = "/ads_archive",
query = list(access_token = my_token,
limit=100,
ad_active_status="ALL",
search_terms="''",
fields=search_fields,
ad_reached_countries="AT"))
page_one_content<- content(page_one_response)
page_one_content
#get the data from the first 'page' of data the api provides
page_one_response <- GET(my_link,
path = "/ads_archive",
query = list(access_token = my_token,
limit=10,
ad_active_status="ALL",
search_terms="''",
fields=search_fields,
ad_reached_countries="AT"))
page_one_content<- content(page_one_response)
page_one_content
page_one_response
#link to fb api
my_link<- "https://graph.facebook.com/v3.1"
my_token <- "EAAD7pP2B314BALFkTUZBNi5M4JhjqLd1P8T3c1GLfdG8JkP7Bu5cPfKq6CNlje6gpgboDWX91CZCnFyGphtgZCujYEC4pLFYamqncc5dF3NqCpy6ZCKnEnXHRiBYw1lglvWZAhp8d0ZBs1FLY3z49lw1UT8dZAjOV8JW3L1LGzw8G1uPIW1pSlgrIhZCb3y9ejPdZCGAYaW42WAZDZD"
#define fields you are interested in
search_fields=c("ad_creation_time", "ad_delivery_start_time", "ad_delivery_stop_time",
"ad_creative_body",
"page_id",
"page_name",
"currency",
"spend",
"demographic_distribution",
"funding_entity",
"impressions",
"region_distribution") %>%
stringr::str_c(., collapse=", ")
#get the data from the first 'page' of data the api provides
page_one_response <- GET(my_link,
path = "/ads_archive",
query = list(access_token = my_token,
limit=10,
ad_active_status="ALL",
search_terms="''",
fields=search_fields,
ad_reached_countries="AT"))
page_one_response
#get the data from the first 'page' of data the api provides
page_one_response <- GET(my_link,
path = "/v3.1/ads_archive",
query = list(access_token = my_token,
limit=10,
ad_active_status="ALL",
search_terms="''",
fields=search_fields,
ad_reached_countries="AT"))
page_one_response
#link to fb api
my_link<- "https://graph.facebook.com"
my_token <- "EAAD7pP2B314BALFkTUZBNi5M4JhjqLd1P8T3c1GLfdG8JkP7Bu5cPfKq6CNlje6gpgboDWX91CZCnFyGphtgZCujYEC4pLFYamqncc5dF3NqCpy6ZCKnEnXHRiBYw1lglvWZAhp8d0ZBs1FLY3z49lw1UT8dZAjOV8JW3L1LGzw8G1uPIW1pSlgrIhZCb3y9ejPdZCGAYaW42WAZDZD"
#define fields you are interested in
search_fields=c("ad_creation_time", "ad_delivery_start_time", "ad_delivery_stop_time",
"ad_creative_body",
"page_id",
"page_name",
"currency",
"spend",
"demographic_distribution",
"funding_entity",
"impressions",
"region_distribution") %>%
stringr::str_c(., collapse=", ")
#get the data from the first 'page' of data the api provides
page_one_response <- GET(my_link,
path = "/v3.1/ads_archive",
query = list(access_token = my_token,
limit=10,
ad_active_status="ALL",
search_terms="''",
fields=search_fields,
ad_reached_countries="AT"))
page_one_response
page_one_content<- content(page_one_response)
page_one_content
page_one_response
#get the data from the first 'page' of data the api provides
page_one_response <- GET(my_link,
path = "/v4.0/ads_archive",
query = list(access_token = my_token,
limit=10,
ad_active_status="ALL",
search_terms="''",
fields=search_fields,
ad_reached_countries="AT"))
page_one_content<- content(page_one_response)
page_one_content
page_one_response
library(dplyr)
library(httr)
#link to fb api
my_link<- "https://graph.facebook.com"
my_token <- "EAAD7pP2B314BALFkTUZBNi5M4JhjqLd1P8T3c1GLfdG8JkP7Bu5cPfKq6CNlje6gpgboDWX91CZCnFyGphtgZCujYEC4pLFYamqncc5dF3NqCpy6ZCKnEnXHRiBYw1lglvWZAhp8d0ZBs1FLY3z49lw1UT8dZAjOV8JW3L1LGzw8G1uPIW1pSlgrIhZCb3y9ejPdZCGAYaW42WAZDZD"
#define fields you are interested in
search_fields=c("ad_creation_time", "ad_delivery_start_time", "ad_delivery_stop_time",
"ad_creative_body",
"page_id",
"page_name",
"currency",
"spend",
"demographic_distribution",
"funding_entity",
"impressions",
"region_distribution") %>%
stringr::str_c(., collapse=", ")
#get the data from the first 'page' of data the api provides
page_one_response <- GET(my_link,
path = "/v4.0/ads_archive",
query = list(access_token = my_token,
limit=10,
ad_active_status="ALL",
search_terms="''",
fields=search_fields,
ad_reached_countries="AT"))
page_one_content<- content(page_one_response)
page_one_content
page_one_content
page_one_response
#Tablas comparativos
library(gridExtra) ; library(tidyr) ; library(dplyr) ; library(ggplot2) ; library(lubridate) ; library(stringr) ;library(cowplot) ; library(ggthemes)
Leads_Final <- read.csv('/home/carlos/Documentos/3_Adsocial/GWEP/Data/Reporte/Finales_actuales/Leads_Final_historico.csv',
stringsAsFactors = FALSE)
table(Leads_Final$Archivo)
archivo = "TEST_AdSocial_2020-04-30 al 2020-05-31.csv"
base <- read.csv('/home/carlos/Documentos/3_Adsocial/GWEP/Data/Reporte/TEST_AdSocial_2020-04-30 al 2020-05-31.csv',
stringsAsFactors = FALSE, skip = 1)
specify_decimal <- function(x, k) as.numeric(trimws(format(round(x, k), nsmall=k)))
format_number <- function(x,k) formatC(as.numeric(x),format="f",digit=0,big.mark = ",")
Formato_base <- function(base){
#Las ultimas 3 filas son basura
base <- base[1:as.integer(dim(base)[1]-3),]
#Separamos la columna Hora.de.creacion para trabajar solo con d/m/y
base <- base %>%
separate(Hora.de.creación,
c("Hora.de.creación","Hora","AM/PM"),
sep = " ")
base <- base %>%
select(Fuente.de.Posible.cliente, Estado.de.Posible.cliente, Desarrollo, Hora.de.creación) %>%
mutate(Hora.de.creación = ymd(as.Date(base$Hora.de.creación, format = "%d/%m/%Y")))
base$Hora.de.creación  <- as.Date(base$Hora.de.creación, format = "%Y-%m-%d")
base$Hora.de.creación <- as.character(base$Hora.de.creación)
base$Hora.de.creación <-as.Date(base$Hora.de.creación, format = "%Y-%m-%d")
base$Hora.de.creación <- ymd(base$Hora.de.creación)
#Le colocamos una etiqueta del mes
base['ym'] <- ymd(paste0(year(base$Hora.de.creación),"-",month(base$Hora.de.creación) ,"-01"))
#Limpieza de Estado.cliente, Fuente.cliente, desarrollo
#desarrollo
base$Desarrollo <- str_replace_all(base$Desarrollo,
c("Parque&#x20;Hacienda"="Parque Hacienda",
"Real&#x20;de&#x20;Lutecia"="Real de Lutecia",
"Reserva&#x20;del&#x20;sur"="Reserva del sur"))
base$Estado.de.Posible.cliente <- str_replace_all(base$Estado.de.Posible.cliente,
c("Contactado"="Contactado",
"Contactar en el futuro"="Contactar",
"Visita agendada"="Agendada",
"Intento de contacto"="Intento",
"Intento x20 de x20 contacto"="Intento",
"Contactar x20 en x20 el x20 futuro"="Contactar",
"Visita x20 agendada"="Agendada"))
base$Fuente.de.Posible.cliente <- str_replace_all(base$Fuente.de.Posible.cliente, c("Facebook Ads"="Facebook",
"Facebook orgánico"="Facebook",
"Inbox Facebook"="Facebook",
"Google Adwords"="Google",
"Google orgánico"="Google"))
return(base)
}
base <- Formato_base(base)
base$Archivo <- archivo
head(base)
head(Leads_Final)
#Rango de fechas que necesitamos agregar o tomar
Conteo_nuevo <- base %>%
group_by(ym,Hora.de.creación) %>%
summarise(Conteo = n())
Conteo_actual <- Leads_Final %>%
group_by(ym,Hora.de.creación) %>%
summarise(Conteo = n())
#Tomamos el max del archivo actual para partir de esa fecha para el nuevo archivo y evitar duplicidad.
actual <- base %>% filter(base$Hora.de.creación > max(Conteo_actual$Hora.de.creación))
#Validar si es necesario agregar nuevos casos a los str_replaces_all
names(actual)
table(actual$Fuente.de.Posible.cliente)
table(Leads_Final$Fuente.de.Posible.cliente)
table(actual$Estado.de.Posible.cliente)
table(Leads_Final$Estado.de.Posible.cliente)
table(actual$Desarrollo)
table(Leads_Final$Desarrollo)
#
names(actual)
names(Leads_Final)
str(actual)
str(Leads_Final)
Leads_Final <- rbind(actual, Leads_Final)
str(Leads_Final)
table(Leads_Final$Hora.de.creación)
table(Leads_Final$ym)
table(Leads_Final$Archivo)
Leads_Final$Hora.de.creación <-as.Date(Leads_Final$Hora.de.creación, format = "%Y-%m-%d")
Leads_Final$Hora.de.creación <- ymd(Leads_Final$Hora.de.creación)
Leads_Final['ym'] <- ymd(paste0(year(Leads_Final$Hora.de.creación),"-",month(Leads_Final$Hora.de.creación) ,"-01"))
Desarrollo_interes <- c(Leads_Final %>% group_by(Desarrollo) %>%
summarise(Conteo = n()) %>%
filter(Conteo > 20 & !Desarrollo %in% c("Parque Satélite","Vidarte","La Purísima")))[1]
Leads_Final$Estado.de.Posible.cliente <- str_replace_all(Leads_Final$Estado.de.Posible.cliente,
c("Contactado"="Contactado",
"Contactar en el futuro"="Contactar",
"Visita agendada"="Agendada",
"Intento de contacto"="Intento",
"Intento x20 de x20 contacto"="Intento",
"Contactar x20 en x20 el x20 futuro"="Contactar",
"Visita x20 agendada"="Agendada"))
Leads_Final$Fuente.de.Posible.cliente <- str_replace_all(Leads_Final$Fuente.de.Posible.cliente, c("Facebook Ads"="Facebook",
"Facebook orgánico"="Facebook",
"Inbox Facebook"="Facebook",
"Google Adwords"="Google",
"Google orgánico"="Google"))
#Se pega manual la nueva información
Plataformas <- read.csv("~/Documentos/3_Adsocial/GWEP/Campañas/campañas_final_mayo.csv")
head(Plataformas,2)
table(Plataformas$Archivo)
#linea 199
Fuente_clientes <- c("Facebook","Google","Instagram","Langind page","Página web")
#Todos los Leads plataformas digitales
Conteo_todos <- Leads_Final %>%
group_by(Hora.de.creación, Desarrollo , Fuente.de.Posible.cliente, Estado.de.Posible.cliente) %>%
summarise(Conteo = n()) %>%
filter(Fuente.de.Posible.cliente %in% Fuente_clientes & Desarrollo == desarrollo )
desarrollo <- "Cumbres Herradura"
#Todos los Leads plataformas digitales
Conteo_todos <- Leads_Final %>%
group_by(Hora.de.creación, Desarrollo , Fuente.de.Posible.cliente, Estado.de.Posible.cliente) %>%
summarise(Conteo = n()) %>%
filter(Fuente.de.Posible.cliente %in% Fuente_clientes & Desarrollo == desarrollo )
Conteo_todos$Fuente.de.Posible.cliente <- str_replace_all(Conteo_todos$Fuente.de.Posible.cliente,c("Instagram"="Facebook"))
table(Conteo_todos$Fuente.de.Posible.cliente)
sum(Conteo_todos$Conteo)
Leads_Zoho_todos <- Conteo_todos %>%
group_by(Desarrollo,Hora.de.creación,Fuente.de.Posible.cliente) %>%
summarize(Leads = sum(Conteo))
Leads_Zoho_todos$Mes <- month(Leads_Zoho_todos$Hora.de.creación, label = TRUE)
Leads_Zoho_todos$Año <- year(Leads_Zoho_todos$Hora.de.creación)
Leads_Zoho_todos <- Leads_Zoho_todos %>% group_by(Año,Mes,Fuente.de.Posible.cliente) %>% summarize(Leads = sum(Leads)) %>% mutate(tipo_lead = "todos")
Leads_Zoho_todos['llave'] <- paste0(Leads_Zoho_todos$Año,"_",Leads_Zoho_todos$Mes,"_",Leads_Zoho_todos$Fuente.de.Posible.cliente)
names(Leads_Zoho_todos) <- c("Año", "Mes", "Plataforma", "Conteo_Leads","Tipo_de_lead","llave")
sum(Leads_Zoho_todos$Conteo_Leads)
#Todos los lead interese plataformas digitales
Tipo_Lead <- c("Contactado","Contactar","Agendada","Intento")
Conteo_interes <- filter(Conteo_todos, Estado.de.Posible.cliente %in% Tipo_Lead)
#Leads de interes
Leads_Zoho_interes <- Conteo_interes %>%
group_by(Desarrollo,Hora.de.creación,Fuente.de.Posible.cliente) %>%
summarize(Leads = sum(Conteo))
Leads_Zoho_interes$Mes <- month(Leads_Zoho_interes$Hora.de.creación, label = TRUE)
Leads_Zoho_interes$Año <- year(Leads_Zoho_interes$Hora.de.creación)
Leads_Zoho_interes <- Leads_Zoho_interes %>% group_by(Año,Mes,Fuente.de.Posible.cliente) %>% summarize(Leads = sum(Leads)) %>% mutate(tipo_lead = "interes")
Leads_Zoho_interes['llave'] <- paste0(Leads_Zoho_interes$Año,"_",Leads_Zoho_interes$Mes,"_",Leads_Zoho_interes$Fuente.de.Posible.cliente)
names(Leads_Zoho_interes) <- c("Año", "Mes", "Plataforma", "Conteo_Leads","Tipo_de_lead","llave")
sum(Leads_Zoho_interes$Conteo_Leads)
#dinero gastado
Resumen_Campañas <- Plataformas %>% group_by(ym, Plataforma,Desarrollo) %>%
filter(Desarrollo == desarrollo) %>%
summarize(Clics = sum(Clics,na.rm = TRUE),
Conversiones = sum(Conversiones,na.rm = TRUE),
Inversión = sum(Costo,na.rm = TRUE))
Plataformas <- read.csv("~/Documentos/3_Adsocial/GWEP/Campañas/campañas_final_mayo.csv")
head(Plataformas,2)
specify_decimal <- function(x, k) as.numeric(trimws(format(round(x, k), nsmall=k)))
format_number <- function(x,k) formatC(as.numeric(x),format="f",digit=0,big.mark = ",")
desarrollo <- desarrollo
#Union_Facebook
#Archivo plataforma
#Nombre de la campaña,	Inicio_del_reporte,	Finalización_reporte,	Importe gastado (MXN), Impresiones,	Clics en el enlace, Indicador de resultado,
#Costo por resultados, CPC (costo por clic en el enlace), (MXN) Clientes potenciales en Facebook
#Nuevos nombres
#Campaña,	Fecha_Inicio,	Fecha_Fin,	Costo, Impresiones,	Clics, Costo_conversion, CPC_promedio, Conversiones
#De googgle tomó
#Campaña,	Fecha_Inicio_reporte,	Fecha_Fin_reporte,	Costo, Impresiones,	Clics, Costo_conversion, CPC_promedio, Conversiones
#En ocasiones el formato de fecha cambia d/m/y ó d-m-y
tmp_Fb <- Plataformas %>% filter(Plataforma == "Facebook")
tmp_Go <- Plataformas %>% filter(Plataforma == "Google")
tmp_Fb$Fecha_Inicio <- as.Date(tmp_Fb$Fecha_Inicio, format = "%Y-%m-%d")
tmp_Fb$Fecha_Inicio <- ymd(tmp_Fb$Fecha_Inicio)
tmp_Fb['ym'] <- ymd(paste0(year(tmp_Fb$Fecha_Inicio),"-",month(tmp_Fb$Fecha_Inicio) ,"-01"))
tmp_Go$Fecha_Inicio <- str_replace_all(tmp_Go$Fecha_Inicio, c("ene"="01","feb"="02","mar"="03","abr"="04","may"="05","jun"="06",
"jul"="07","ago"="08","sep"="09","oct"="10","nov"="11","dic"="12"))
tmp_Go$Fecha_Inicio <- paste0("01-",tmp_Go$Fecha_Inicio)
tmp_Go$Fecha_Inicio <- as.Date(tmp_Go$Fecha_Inicio, format = "%d-%m-%y")
tmp_Go['ym'] <- ymd(tmp_Go$Fecha_Inicio)
Plataformas <- rbind(tmp_Fb,tmp_Go) ; rm(tmp_Fb,tmp_Go)
table(Plataformas$Desarrollo)
Plataformas <- filter(Plataformas, ym > "2018-12-01" & Desarrollo %in% c("Aurum","Cumbres Herradura","El Cortijo","Parque Hacienda","Real de Lutecia","Reserva del sur"))
table(Plataformas$Desarrollo)
#dinero gastado
Resumen_Campañas <- Plataformas %>% group_by(ym, Plataforma,Desarrollo) %>%
filter(Desarrollo == desarrollo) %>%
summarize(Clics = sum(Clics,na.rm = TRUE),
Conversiones = sum(Conversiones,na.rm = TRUE),
Inversión = sum(Costo,na.rm = TRUE))
names(Resumen_Campañas) <- c("Fecha","Plataforma","Desarrollo","Clics","Conversión","Inversión")
Resumen_Campañas$Inversión <-  as.numeric(Resumen_Campañas$Inversión)
Resumen_Campañas$Clics <- paste0(formatC(as.numeric(Resumen_Campañas$Clics), format="f", digits=0, big.mark=","))
Resumen_Campañas['Mes'] <- month(Resumen_Campañas$Fecha, label = TRUE)
Resumen_Campañas['Año'] <- year(Resumen_Campañas$Fecha)
Resumen_Campañas <- data.frame(Resumen_Campañas) %>% select(Año, Mes, Plataforma,Desarrollo, Clics, Conversión, Inversión)
Resumen_Campañas['llave'] <- paste0(Resumen_Campañas$Año,"_",Resumen_Campañas$Mes,"_",Resumen_Campañas$Plataforma)
tmp_todos <- left_join(Leads_Zoho_todos, Resumen_Campañas, by = c("llave"))
tmp_todos
tmp_interes <- left_join(Leads_Zoho_interes, Resumen_Campañas, by = c("llave"))
tmp_interes
tmp_interes['cpl'] <- round(tmp_interes$Inversión / tmp_interes$Conteo_Leads,2)
tmp_todos['cpl'] <- round(tmp_todos$Inversión / tmp_todos$Conteo_Leads,2)
tmp_todos['test'] <- paste0(tmp_todos$Año.x,"-",tmp_todos$Mes.x)
tmp_interes['test'] <- paste0(tmp_interes$Año.x,"-",tmp_interes$Mes.x)
cpl_t <- ggplot(tmp_todos, aes(x = test, y = cpl, fill = Plataforma.x)) +
geom_col() +
geom_text(aes(label = paste0("$",formatC(as.numeric(cpl), format="f", digits=0, big.mark=","))), position = position_stack(vjust = 0.5), size = 3,check_overlap = TRUE) +
theme(axis.text.x = element_text(angle = 90)) +
ggtitle("Todos los leads CPL Aurum") +
labs(fill = "") +
ggthemes::theme_economist() +
xlab("") +
ylab("")
cpl_t
cpl_i <- ggplot(tmp_interes, aes(x = test, y = cpl, fill = Plataforma.x)) +
geom_col() +
geom_text(aes(label = paste0("$",formatC(as.numeric(cpl), format="f", digits=0, big.mark=","))), position = position_stack(vjust = 0.5), size = 3,check_overlap = TRUE) +
theme(axis.text.x = element_text(angle = 90)) +
ggtitle("Todos los leads de interes CPL Aurum") +
labs(fill = "") +
ggthemes::theme_economist() +
xlab("") +
ylab("")
Salida <- list(grid.arrange(cpl_t, cpl_i, nrow = 1, ncol = 2, as.table = TRUE))
View(tmp_todos)
#Campañas por Mes, Desarrollo y plataforma
Conteo <- Plataformas %>% group_by(ym, Plataforma, Desarrollo, Campaña) %>%
summarise(Conteo = n()) %>%
filter(Desarrollo == desarrollo) %>%
group_by(ym, Plataforma) %>%
summarise(Conteo = n())
View(Conteo)
View(tmp_interes)
84/2707
1391/25000
25000/1391
2707/84
View(tmp_interes)
library(sqldf) #Libreria de R que nos ayuda a introducir codigo SQL en R
sqldf('SELECT * FROM mtcars') #Indica que requiero todas las columnas de la tabla mtcars
sqldf('SELECT mpg,cyl,disp FROM mtcars') #Especifico que columnas deseo tomar de la tabla mtcars
sqldf('SELECT mpg,cyl,disp FROM mtcars') #Especifico que columnas deseo tomar de la tabla mtcars
sqldf('SELECT * FROM mtcars LIMIT 10')
sqldf('SELECT DISTINCT am * FROM mtcars LIMIT 10')
sqldf('SELECT DISTINCT am FROM mtcars LIMIT 10')
sqldf('SELECT DISTINCT am FROM mtcars LIMIT 10')
sqldf('SELECT COUNT(am) FROM mtcars LIMIT 10')
#######################
#Seleccion de Columnas#
#######################
dim(mtcars)
sqldf('SELECT COUNT(*) am FROM mtcars LIMIT 10')
sqldf('SELECT COUNT(*) ,am FROM mtcars LIMIT 10')
sqldf('SELECT COUNT(*) FROM mtcars') #Cuenta el Numero de Filas
sqldf('SELECT COUNT(am) FROM mtcars LIMIT 10')
sqldf('SELECT COUNT(DISTINCT vs) FROM mtcars') #Conbinando ambas funciones COUNT y DISTINCT
sqldf("SELECT cyl, COUNT(*) AS Conteo_cyl FROM mtcars
GROUP BY cyl")
sqldf('SELECT COUNT(*) FROM mtcars GROUP BY cyl)
''
a
dsf=
)
''
sqldf('SELECT COUNT(*) FROM mtcars GROUP BY cyl')
sqldf('SELECT COUNT(*) FROM mtcars GROUP BY cyl')
sqldf("SELECT cyl, COUNT(*) AS Conteo_cyl, MIN(mpg) AS Minimo_del_Grupo FROM mtcars
GROUP BY cyl")
sqldf('SELECT COUNT(*), cyl FROM mtcars GROUP BY cyl')
sqldf('SELECT cyl, COUNT(*) FROM mtcars GROUP BY cyl')
sqldf('SELECT cyl, COUNT(*) FROM mtcars WHERE mpg > 25 GROUP BY cyl')
sqldf('SELECT DISTINCT vs FROM mtcars') #DISTINCT toma los vales Unicos en una columna
sqldf('SELECT COUNT(*) FROM mtcars') #Cuenta el Numero de Filas
sqldf('SELECT COUNT(DISTINCT vs) FROM mtcars') #Conbinando ambas funciones COUNT y DISTINCT
sqldf('SELECT COUNT(DISTINCT vs) FROM mtcars') #Combinando ambas funciones COUNT y DISTINCT
sqldf("SELECT cyl, COUNT(*) FROM mtcars
GROUP BY cyl
WHERE mpg > 21") #Nos marcara Error por usar WHERE despues del GROUP BY
sqldf("SELECT cyl, COUNT(*) FROM mtcars
GROUP BY cyl
HAVING mpg > 21") #La forma correcta es colocando HAVING
sqld('SELECT cyl, COUNT(*) FROM mtcars
WHERE mpg > 21
GROUP BY cyl')
sqldf('SELECT cyl, COUNT(*) FROM mtcars
WHERE mpg > 21
GROUP BY cyl')
sqldf("SELECT cyl, COUNT(*) FROM mtcars
GROUP BY cyl
HAVING mpg > 21") #La forma correcta es colocando HAVING
head(mtcars)
sqldf('SELECT * FROM mtcars WHERE am = (SELECT MAX(am) FROM mtcars)')
sqldf('SELECT * FROM mtcars WHERE am = (SELECT MAX(am) FROM mtcars)')
sqldf('SELECT DISTINCT am FROM (SELECT * FROM mtcars WHERE am = (SELECT MAX(am) FROM mtcars))')
Leads_Final <- read.csv("/home/carlos/Documentos/3_Adsocial/GWEP/Data/Reporte/Finales_actuales/Leads_Final_historico.csv")
Plataformas <- read.csv("~/Documentos/3_Adsocial/GWEP/Campañas/campañas_final_junio.csv")
head(Leads_Final)
head(Plantaformas)
head(Plataformas)
table(Leads_Final$Desarrollo)
#linea 199
Fuente_clientes <- c("Facebook","Google","Instagram","Langind page","Página web")
#Todos los Leads plataformas digitales
Conteo_todos <- Leads_Final %>%
group_by(Hora.de.creación, Desarrollo , Fuente.de.Posible.cliente, Estado.de.Posible.cliente) %>%
summarise(Conteo = n()) %>%
filter(Fuente.de.Posible.cliente %in% Fuente_clientes & Desarrollo == desarrollo )
library(gridExtra) ; library(tidyr) ; library(dplyr) ; library(ggplot2) ; library(lubridate) ; library(stringr) ;library(cowplot) ; library(ggthemes)
Leads_Final <- read.csv("/home/carlos/Documentos/3_Adsocial/GWEP/Data/Reporte/Finales_actuales/Leads_Final_historico.csv")
Plataformas <- read.csv("~/Documentos/3_Adsocial/GWEP/Campañas/campañas_final_junio.csv")
#Todos los Leads plataformas digitales
Conteo_todos <- Leads_Final %>%
group_by(Hora.de.creación, Desarrollo , Fuente.de.Posible.cliente, Estado.de.Posible.cliente) %>%
summarise(Conteo = n()) %>%
filter(Fuente.de.Posible.cliente %in% Fuente_clientes & Desarrollo == desarrollo )
desarrollo <- "Aurum"
#linea 199
Fuente_clientes <- c("Facebook","Google","Instagram","Langind page","Página web")
#Todos los Leads plataformas digitales
Conteo_todos <- Leads_Final %>%
group_by(Hora.de.creación, Desarrollo , Fuente.de.Posible.cliente, Estado.de.Posible.cliente) %>%
summarise(Conteo = n()) %>%
filter(Fuente.de.Posible.cliente %in% Fuente_clientes & Desarrollo == desarrollo )
View(Conteo_todos)
Conteo_todos$Fuente.de.Posible.cliente <- str_replace_all(Conteo_todos$Fuente.de.Posible.cliente,c("Instagram"="Facebook"))
table(Conteo_todos$Fuente.de.Posible.cliente)
sum(Conteo_todos$Conteo)
#Leads todos
Leads_Zoho_todos <- Conteo_todos %>%
group_by(Desarrollo,Hora.de.creación,Fuente.de.Posible.cliente) %>%
summarize(Leads = sum(Conteo))
View(Leads_Zoho_todos)
head(Conteo_todos)
head(Leads_Zoho_todos)
library(gridExtra) ; library(tidyr) ; library(dplyr) ; library(ggplot2) ; library(lubridate) ; library(stringr) ;library(cowplot) ; library(ggthemes)
Leads_Final <- read.csv("/home/carlos/Documentos/3_Adsocial/GWEP/Data/Reporte/Finales_actuales/Leads_Final_historico.csv")
Plataformas <- read.csv("~/Documentos/3_Adsocial/GWEP/Campañas/campañas_final_junio.csv")
table(Leads_Final$Desarrollo)
desarrollo <- "Parque Hacienda"
#linea 199
Fuente_clientes <- c("Facebook","Google","Instagram","Langind page","Página web")
install.packages("RODBCDBI")
install.packages("RODBC")
reticulate::repl_python()
library(gridExtra) ; library(tidyr) ; library(dplyr) ; library(ggplot2) ; library(lubridate) ; library(stringr) ;library(cowplot) ; library(ggthemes)
setwd("/home/carlos/Documentos/3_Adsocial/Marketing/GWEP/Modelos_parque_hacienda/")
getwd()
list.files()
leads <- read.csv("bases/zoho_parque_hacienda_v1/union_leads.csv")
leads <- leads %>% select(Created.Time, Email, Lead.Status, Lead.Source,
Subject..Activity., Subject, Ad.Campaign.Name,
Campaña.MKT, Keyword, Ad.Click.Date, First.Page.Visited,
Cost.per.Click, Cost.per.Conversion)
head(leads,3)
#Hora de creación
leads <- leads %>%
separate(Created.Time,
c("dia_creacion","Hora","AM/PM"),
sep = " ") %>%
mutate(dia_creacion = ymd(as.Date(dia_creacion, format = "%d/%m/%Y")))
leads$dia_creacion <- as.Date(leads$dia_creacion,
format = "%Y-%m-%d")
View(leads)
leads$Email <- as.character(leads$Email)
tmp_email <- group_by(leads,Email, Lead.Status) %>% summarise(conteo = n())
View(tmp_email)
View(tmp_email)
head(tmp_email)
ggplot(tmp_email, aes(x = Email, y = conteo)) + geom_point(color = "#00AFBB")
ggplot(tmp_email, aes(x = Email, y = conteo)) + geom_point(color = "#00AFBB") +
theme(axis.text.x = element_text(angle = 90))
ggplot(tmp_email, aes(x = Email, y = conteo)) + geom_point(color = "#00AFBB") +
labs(fill = "") +
ggthemes::theme_economist() +
xlab("") +
ylab("")
ggplot(tmp_email, aes(x = Email, y = conteo)) + geom_point(color = "#00AFBB") +
labs(fill = "") +
xlab("") +
ylab("")
summary(tmp_email$conteo)
head(leads,3)
table(leads$Lead.Status)
View(leads)
View(leads)
View(leads)
View(tmp_email)
View(leads)
summary(tmp_email$conteo)
table(leads$dia_creacion)
table(leads$Lead.Status)
summary(tmp_email$conteo)
