#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Nov 12 22:13:19 2019

@author: dianabarquera

Descripcion: Visualización de la información de Google Analytics:
    
    Productos más vendidos por mes
    1.General
    2.Edad
    3.Región
    4.Sexo

Primero se importan todos los archivos -> se limpian y agrupan -> se grafican

"""
#Paqueterías
import os 
import re 
import pandas as pd
import plotly.offline as pyo
import plotly.express as px
import plotly.graph_objects as go
import glob
import random

pd.set_option('display.float_format', lambda x: '%.f' % x)

#-- Unir los archivos para leerlos --#
#os.chdir("/Users/dianabarquera/AdSocial Dropbox/Diana Barquera/Bases AdSocial/Históricos GG/Petco/G Analytics/Productos/General/")
os.listdir('.')
len(os.listdir('.'))

Cuenta = ['Office Depot','Petco','RadioShack']
analytics_productos = []

#Une todos los archivos de productos de las cuentas.
for i in range(len(Cuenta)):
    analytics_productos_archivos = glob.glob("/home/carlos/Dropbox/Históricos GG/Históricos GG/" + Cuenta[i] + "/G Analytics/Productos/General/*.xlsx")

    # Productos por Campaña #
    for xls in analytics_productos_archivos:
            tmp = pd.ExcelFile(xls)
            tmp = pd.read_excel(xls, 'Conjunto de datos1')
            tmp['archivo'] = xls
            tmp = tmp.iloc[:-1]
            tmp['cuenta'] = Cuenta[i]
            analytics_productos.append(tmp)

analytics_productos = pd.concat(analytics_productos)

analytics_productos['fechas'] = [ re.findall( r"\d{8}-\d{8}" ,i) for i in analytics_productos.archivo ]

# Validando #
analytics_productos.archivo.value_counts()
analytics_productos.dtypes
analytics_productos.notnull().all()
analytics_productos.cuenta.value_counts()

tmp1 = analytics_productos.head()

#Edad
os.chdir("/Users/dianabarquera/AdSocial Dropbox/Diana Barquera/Bases AdSocial/Históricos GG/Petco/G Analytics/Productos/Edad/")
os.listdir('.')
len(os.listdir('.'))

Producto_Edad = os.listdir()

# Unir los archivos para leerlos #

# Productos por Campaña #

Union_prodEdad_list = []

for xls in Producto_Edad:
    
        tmp = pd.ExcelFile(xls)
        tmp = pd.read_excel(xls, 'Conjunto de datos1')
        tmp['archivo'] = xls
        Union_prodEdad_list.append(tmp)

Union_prodEdad = pd.concat(Union_prodEdad_list)

Union_prodEdad['fechas'] = [ re.findall( r"\d{8}-\d{8}" ,i) for i in Union_prodEdad.archivo ]


######### Validando ########################
Union_prodEdad.archivo.value_counts()
Union_prodEdad.dtypes
tmp2 = Union_prodEdad.head()
###########################################

#Sexo
os.chdir("/Users/dianabarquera/AdSocial Dropbox/Diana Barquera/Bases AdSocial/Históricos GG/Petco/G Analytics/Productos/Sexo/")
os.listdir('.')
len(os.listdir('.'))

Producto_Sexo = os.listdir()

# Unir los archivos para leerlos #

# Productos por Campaña #

Union_prodSexo_list = []

for xls in Producto_Sexo:
    
        tmp = pd.ExcelFile(xls)
        tmp = pd.read_excel(xls, 'Conjunto de datos1')
        tmp['archivo'] = xls
        Union_prodSexo_list.append(tmp)

Union_prodSexo = pd.concat(Union_prodSexo_list)

Union_prodSexo['fechas'] = [ re.findall( r"\d{8}-\d{8}" ,i) for i in Union_prodSexo.archivo ]


######### Validando ########################
Union_prodSexo.archivo.value_counts()
Union_prodSexo.dtypes
tmp3 = Union_prodSexo.head()
###########################################
os.chdir("/Users/dianabarquera/AdSocial Dropbox/Diana Barquera/Bases AdSocial/Históricos GG/Petco/G Analytics/Productos/Región/")
Archivos = os.listdir()

Arch_region = [x for x in Archivos if "Analytics" in x]

len(os.listdir('.'))

Producto_Geo = os.listdir()

# Unir los archivos para leerlos #

# Productos por Campaña #

Union_prodGeo_list = []

for xls in Producto_Geo:
    
        tmp = pd.ExcelFile(xls)
        tmp = pd.read_excel(xls, 'Conjunto de datos1')
        tmp['archivo'] = xls
        Union_prodGeo_list.append(tmp)

Union_prodGeo = pd.concat(Union_prodGeo_list)

Union_prodGeo['fechas'] = [ re.findall( r"\d{8}-\d{8}" ,i) for i in Union_prodGeo.archivo ]


######### Validando ########################
Union_prodGeo.archivo.value_counts()
Union_prodGeo.dtypes
tmp4 = Union_prodGeo.head()
###################
#Limpieza de datos
#1.Formato de fechas, colocamos la fecha del reporte para extraer el mes del reporte
#2.Reducción del nombre del producto tomando las primeras 3 palabras
#3.Agrupacion por mes, cuenta, producto_nuevo
#4.Limpiamos la fuente de medios
#
#Objetivo: tenero mayor claridad de los datos.
###################

#Fechas
def Formato_Fechas_analytics(Base, Columna):

    fechas = Base[Columna].astype(str).str.split("-",expand = True)
    fechas = pd.DataFrame(fechas)
    fechas.columns = ['Fecha_inicio','Fecha_fin']
     
    Base['Fecha_inicio'] = fechas.iloc[:,0]
    Base['Fecha_fin'] = fechas.iloc[:,1]
       
    Base.Fecha_inicio = Base.Fecha_inicio.apply(lambda x: str(x).replace("['",""))
    Base.Fecha_fin = Base.Fecha_fin.apply(lambda x: str(x).replace("']",""))
    
    Base.Fecha_inicio = pd.to_datetime(Base.Fecha_inicio,format = "%Y%m%d")
    Base.Fecha_fin = pd.to_datetime(Base.Fecha_fin,format = "%Y%m%d")

    return Base

#Reduccion del nombre de los productos
def Formato_Producto(Base):

    #Base.Producto[Base.Producto.isnull()] = ""
    Base.Producto = Base.Producto.str.lower()
    tmp = Base.Producto.str.split(" ", 20, expand=True).iloc[:,:3]
    tmp.fillna(value=" ", inplace=True)
    Producto_nueva = tmp.iloc[:,0] + " " + tmp.iloc[:,1] + " " +  tmp.iloc[:,2]

    return Producto_nueva

#Base analytics_productos
analytics_productos = Formato_Fechas_analytics(analytics_productos, 'fechas')
analytics_productos['mes'] = pd.DatetimeIndex(analytics_productos['Fecha_inicio']).month

analytics_productos['Producto_nueva'] = Formato_Producto(analytics_productos)

#Reduccion de la fuente de medios
analytics_productos.keys()
analytics_productos = analytics_productos.rename(columns = {'Fuente/Medio':'Fuente_Medio'})
analytics_productos.notnull().all()
analytics_productos = analytics_productos.fillna('vacio')
analytics_productos['Fuente_Medio'] = analytics_productos['Fuente_Medio'].str.lower()

#Conteo de registros por cliente
analytics_productos.cuenta.value_counts()

conteo_FuenteMedios = pd.DataFrame(analytics_productos.Fuente_Medio.value_counts()).reset_index()
#Agrupación una ves limpia la base para reducir su tamaño y claridad
analytics_productos_limpio = analytics_productos.groupby(['mes','cuenta','Fuente_Medio','Producto_nueva'], as_index = False).sum()
analytics_productos_limpio['Fuente_categoria'] = analytics_productos_limpio['Fuente_Medio']

#Adsocial
analytics_productos_limpio.loc[analytics_productos_limpio['Fuente_categoria'].str.contains('adsocial'), 'Fuente_categoria'] = 'Adsocial'

#Otros sitios
analytics_productos_limpio.loc[analytics_productos_limpio['Fuente_categoria'].str.contains('referral'), 'Fuente_categoria'] = 'otros_sitios_web'

#Organico
analytics_productos_limpio.loc[( (analytics_productos_limpio['Fuente_categoria'].str.contains('organic')) |
                                 (analytics_productos_limpio['Fuente_categoria'].str.contains('bin')) |
                                 (analytics_productos_limpio['Fuente_categoria'].str.contains('google / cpc'))), 'Fuente_categoria'] = 'organico'

#Email
analytics_productos_limpio.loc[analytics_productos_limpio['Fuente_categoria'].str.contains('email', case=False), 'Fuente_categoria'] = 'email'

#Tiendeo
analytics_productos_limpio.loc[analytics_productos_limpio['Fuente_categoria'].str.contains('tiendeo', case=False), 'Fuente_categoria'] = 'tiendeo'

#direct
analytics_productos_limpio.loc[analytics_productos_limpio['Fuente_categoria'].str.contains('direct', case=False), 'Fuente_categoria'] = 'direct'

#Otros
analytics_productos_limpio.loc[ (~(analytics_productos_limpio['Fuente_categoria'].str.contains('Adsocial')) &
              ~(analytics_productos_limpio['Fuente_categoria'].str.contains('otros_sitios')) &
              ~(analytics_productos_limpio['Fuente_categoria'].str.contains('organico')) &
              ~(analytics_productos_limpio['Fuente_categoria'].str.contains('email')) &
              ~(analytics_productos_limpio['Fuente_categoria'].str.contains('tiendeo')) & 
              ~(analytics_productos_limpio['Fuente_categoria'].str.contains('direct')) ) , 'Fuente_categoria'] = 'otros'

#Reduccion de la información por cuenta
analytics_productos_limpio.cuenta.value_counts()

#Validación de alguna fuente categoria
validacion = analytics_productos_limpio[analytics_productos_limpio.Fuente_categoria == 'otros_sitios_web']
tmp = validacion.Fuente_Medio.value_counts().reset_index().sort_values('index')

analytics_productos_limpio.Fuente_categoria.value_counts()
analytics_productos_limpio.groupby(['cuenta','Fuente_categoria']).count()

#--------------------------#Trabajar las demás bases de datos#----------------------------------------------------------#
Base_Edad = Formato_Fechas_analytics(Union_prodEdad,'fechas')
Base_Geo = Formato_Fechas_analytics(Union_prodGeo,'fechas')
Base_Sexo = Formato_Fechas_analytics(Union_prodSexo,'fechas')

#año-mes
#Base_Camp['mes'] = Base_Camp['Fecha_inicio']
#Base_Camp['mes'] =  str(pd.DatetimeIndex(Base_Camp['Fecha_inicio']).year[0]) + "_" +  str(pd.DatetimeIndex(Base_Camp['Fecha_inicio']).month[0])


Base_Edad['mes'] = pd.DatetimeIndex(Base_Edad['Fecha_inicio']).month
Base_Geo['mes'] = pd.DatetimeIndex(Base_Geo['Fecha_inicio']).month
Base_Sexo['mes'] = pd.DatetimeIndex(Base_Sexo['Fecha_inicio']).month

Base_Sexo['Producto_nueva'] = Formato_Producto(Base_Sexo)

Base_Edad['Producto_nueva'] = Formato_Producto(Base_Edad)
Base_Geo['Producto_nueva'] = Formato_Producto(Base_Geo)

Estados = ["Aguascalientes","Baja California","Baja California Sur","Campeche","Chiapas","Chihuahua","Mexico City","Coahuila","Colima","Durango","State of Mexico","Guanajuato","Guerrero","Hidalgo","Jalisco","Michoacan","Morelos","Nayarit","Nuevo Leon","Oaxaca","Puebla","Queretaro","Quintana Roo","San Luis Potosi","Sinaloa","Sonora","Tabasco","Tamaulipas","Tlaxcala","Veracruz","Yucatan","Zacatecas"]

Base_Geo.Región.fillna(value=" ", inplace=True)
Base_Geo = Base_Geo[Base_Geo['Región'].str.contains('|'.join(Estados))]

Base_Geo.Región.value_counts()

############################################################
Genero = Base_Sexo.groupby(['mes','Sexo','Producto_nueva'], as_index = False).sum()
Edad = Base_Edad.groupby(['mes','Edad','Producto_nueva'], as_index = False).sum()
Geo = Base_Geo.groupby(['mes','Región','Producto_nueva'], as_index = False).sum()

###########################################
##              Gráficas                ###
###########################################
random.seed(1)
analytics_productos_limpio['mes_jitter'] = [random.randint(10,70) for i in range(analytics_productos_limpio.shape[0])]
analytics_productos_limpio['mes_jitter'] = analytics_productos_limpio.mes.astype(str) + "." + analytics_productos_limpio.mes_jitter.astype(str)

#enero = analytics_productos_limpio[analytics_productos_limpio.mes == 1]

#nube de puntos productos google analytics
analytics_productos_limpio.Fuente_categoria.value_counts()
analytics_productos_limpio.groupby(['cuenta','Fuente_categoria']).count()

datos_interes = analytics_productos_limpio[(analytics_productos_limpio['Fuente_categoria'] == 'Adsocial') & (analytics_productos_limpio['cuenta'] == 'RadioShack')]
datos_interes = analytics_productos_limpio[analytics_productos_limpio['Fuente_categoria'] == 'Adsocial']

#animation_frame = 'mes'
fig = px.scatter(datos_interes, x="mes_jitter", y="Ingresos del producto", color="Cantidad",
                 size="Cantidad", hover_name ="Producto_nueva",color_continuous_scale=px.colors.sequential.Viridis) 

fig.update_layout(
    title="Histórico de productos Google Analytics por Fuente Adsocial " + str(datos_interes.cuenta.unique()[0]),
    font=dict(size=10),
    annotations = [dict(xref='paper',
                        yref='paper',
                        x=0.5, y=1.05,
                        showarrow=False,
                        text ='¿Cual es el producto más vendidos?, apartir del tamaño del punto y su color')],
                        template = 'ggplot2'
)

pyo.plot(fig)

#caja y bigotes google analytics
#analytics_productos_limpio[analytics_productos_limpio['Ingresos del producto'] < 200] 
fig_2 = go.Figure()

fig_2.add_trace(go.Box(
    y=datos_interes['Ingresos del producto'],
    x=datos_interes['mes'],
    jitter=0.5,
    whiskerwidth=0.2,
    marker_size=2,
    line_width=1)
    )

fig_2.update_layout(
    title = 'Histórico de ingresos productos Google Analytics '  + str(datos_interes.cuenta.unique()[0]),
    title_x = 0.50,
    yaxis_title='Estadisticos mínimo, máximo, promedio, cuantiles',
    template = 'ggplot2'
    )

#fig.update_yaxes(tickprefix="$")
pyo.plot(fig_2)




# Bolitas

### Genero

fig = px.scatter(Genero, x="mes", y="Ingresos del producto", color="Sexo", 
                 size="Cantidad", hover_name ="Producto_nueva")
                        
fig.update_layout(
    title="Productos comprados por Género",
    font=dict(
        size=10
    )
)

fig.update_yaxes(tickprefix="$")
pyo.plot(fig)


#### Edad

fig = px.scatter(Edad, x="mes", y="Ingresos del producto", color="Edad", 
                 size="Cantidad", hover_name ="Producto_nueva")
                        
fig.update_layout(
    title="Productos comprados por Edad",
    font=dict(
        size=10
    )
)

fig.update_yaxes(tickprefix="$")
pyo.plot(fig)

#### Geo

fig = px.scatter(Geo, x="mes", y="Ingresos del producto", color="Región", 
                 size="Cantidad", hover_name ="Producto_nueva")
                        
fig.update_layout(
    title="Productos comprados por Región",
    font=dict(
        size=10
    )
)

fig.update_yaxes(tickprefix="$")
pyo.plot(fig)

########### Cruce??? ########


#Base_Sexo[Base_Sexo.Producto.str.contains('CAJA')]

tmp_edad = Base_Edad.loc[Base_Edad.Producto == 'PANTALLA SANSUI SMX32Z1 (32 PULG., HD)',:]
tmp_sexo = Base_Sexo.loc[Base_Sexo.Producto == 'PANTALLA SANSUI SMX32Z1 (32 PULG., HD)',:]
tmp_union = pd.merge(tmp_edad, tmp_sexo, on = 'Producto', how = 'left')















































